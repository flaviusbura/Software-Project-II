package be.nmbs.logic;

import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
/**
 * 
 * @author Abdel-Portable
 *
 */
public class VerlorenVoorwerpenTest {
	
	private VerlorenVoorwerp verlorenVoorwerp;
	private VerlorenVoorwerp verlorenVoorwerpMetParam;
	SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");

	/**
	 * Objecten declareren om deze te kunnen hergebruiken
	 * @throws Exception
	 */
	
	@Before
	public void setup()  throws Exception {
		verlorenVoorwerpMetParam = new VerlorenVoorwerp(1,"AbdelTest","Test",format.parse("20-11-2016"),true);
	}
	
	
	/**
	 * parameter initialisatie test
	 * @throws ParseException 
	 */
	@Test
	public void aanmakenprijsMetParam() throws ParseException {
		assertNotNull(verlorenVoorwerpMetParam);
		assertEquals(1, verlorenVoorwerpMetParam.getId());
		assertEquals("AbdelTest", verlorenVoorwerpMetParam.getStation());
		assertEquals("Test", verlorenVoorwerpMetParam.getOmschrijving());
		assertEquals(format.parse("20-11-2016"), verlorenVoorwerpMetParam.getDatum());
		assertEquals(true, verlorenVoorwerpMetParam.isActief());
	
	}
	
	/*
	 * getID test
	 */
	@Test
	public void testGetId(){
		assertEquals(1,verlorenVoorwerpMetParam.getId());
	}
	/*
	 * getStation test
	 */
	@Test
	public void testGetStation(){
		assertEquals("AbdelTest",verlorenVoorwerpMetParam.getStation());
	}
	/*
	 * getOmschrijving test
	 */
	@Test
	public void testGetOmschrijving(){
		assertEquals("Test",verlorenVoorwerpMetParam.getOmschrijving());
	}
	/*
	 * getDatum test
	 */
	@Test
	public void testGetDate() throws ParseException{
		assertEquals(format.parse("20-11-2016"),verlorenVoorwerpMetParam.getDatum());
	}
	/*
	 * getActief test
	 */
	@Test
	public void testGetActief(){
		assertEquals(true,verlorenVoorwerpMetParam.isActief());
	}
	/**
	 * setId test
	 */
	@Test
	public void testSetId(){
		
		verlorenVoorwerpMetParam.setId(2);
		assertEquals(2,verlorenVoorwerpMetParam.getId());
	}
	/**
	 * setStation test
	 */
	@Test
	public void testSetStation(){
		
		verlorenVoorwerpMetParam.setStation("TestSetStation");
		assertEquals("TestSetStation",verlorenVoorwerpMetParam.getStation());
	}
	/**
	 * setOmschrijving test
	 */
	@Test
	public void testSetOmschrijving(){
		
		verlorenVoorwerpMetParam.setOmschrijving("TestSetOmschrijving");
		assertEquals("TestSetOmschrijving",verlorenVoorwerpMetParam.getOmschrijving());
	}
	
	/**
	 * setDate test
	 * @throws ParseException 
	 */
	@Test
	public void testSetDate() throws ParseException{
		
		verlorenVoorwerpMetParam.setDatum(format.parse("12-12-2012"));
		assertEquals(format.parse("12-12-2012"),verlorenVoorwerpMetParam.getDatum());
	}
	/**
	 * setActief test
	 */
	@Test
	public void testSetActief(){
		
		verlorenVoorwerpMetParam.setActief(false);
		assertEquals(false,verlorenVoorwerpMetParam.isActief());
		verlorenVoorwerpMetParam.setActief (true);
		assertEquals(true,verlorenVoorwerpMetParam.isActief());
	}
	/**
	 * Deze methode test de hashcode() van de de klasse Prijs
	 */
	@Test
	public void testHashcode() {
		verlorenVoorwerp = verlorenVoorwerpMetParam;
		assertEquals(verlorenVoorwerp.hashCode(), verlorenVoorwerpMetParam.hashCode());
	}
	/**
	 * Deze methode test de equals() van de klasse Prijs
	 */
	@Test
	public void testEquals() {
		verlorenVoorwerp = verlorenVoorwerpMetParam;
		assertTrue(verlorenVoorwerp.equals(verlorenVoorwerpMetParam));
	}
	/**
	 * Hier gebeurt de clean-up
	 * @throws Exception
	 */
	@After
	public void teardown() throws Exception {
		verlorenVoorwerp = null;
		verlorenVoorwerpMetParam = null;
	}
	
	
}

